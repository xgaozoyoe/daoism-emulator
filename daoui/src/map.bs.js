// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Printf = require("bs-platform/lib/js/printf.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");

function build_hexagon(param) {
  var cy = param[1];
  var cx = param[0];
  return /* tuple */[
          /* tuple */[
            cx - 30 | 0,
            cy
          ],
          /* tuple */[
            cx - 15 | 0,
            cy - 26 | 0
          ],
          /* tuple */[
            cx + 15 | 0,
            cy - 26 | 0
          ],
          /* tuple */[
            cx + 30 | 0,
            cy
          ],
          /* tuple */[
            cx + 15 | 0,
            cy + 26 | 0
          ],
          /* tuple */[
            cx - 15 | 0,
            cy + 26 | 0
          ]
        ];
}

function build_hexagon_map(ls_centers) {
  return $$Array.map(build_hexagon, ls_centers);
}

function build_centers(left, top, width, height) {
  var ls_centers = $$Array.init(Caml_int32.imul(width, height), (function (param) {
          return /* tuple */[
                  0,
                  0
                ];
        }));
  for(var y = 0 ,y_finish = height - 1 | 0; y <= y_finish; ++y){
    for(var x = 0 ,x_finish = width - 1 | 0; x <= x_finish; ++x){
      var cx = Caml_int32.imul(x, 45);
      var cy = Caml_int32.imul(y, 52);
      var cy$1 = x % 2 === 0 ? cy : cy + 26 | 0;
      Caml_array.caml_array_set(ls_centers, Caml_int32.imul(y, width) + x | 0, /* tuple */[
            cx + left | 0,
            cy$1 + top | 0
          ]);
    }
  }
  return ls_centers;
}

function build_svg(r, points) {
  var match = points[5];
  var match$1 = points[4];
  var match$2 = points[3];
  var match$3 = points[2];
  var match$4 = points[1];
  var match$5 = points[0];
  var y0 = match$5[1];
  var x0 = match$5[0];
  var points$1 = Curry.app(Printf.sprintf(/* Format */[
            /* Int */Block.__(4, [
                /* Int_d */0,
                /* No_padding */0,
                /* No_precision */0,
                /* Char_literal */Block.__(12, [
                    /* "," */44,
                    /* Int */Block.__(4, [
                        /* Int_d */0,
                        /* No_padding */0,
                        /* No_precision */0,
                        /* Char_literal */Block.__(12, [
                            /* " " */32,
                            /* Int */Block.__(4, [
                                /* Int_d */0,
                                /* No_padding */0,
                                /* No_precision */0,
                                /* Char_literal */Block.__(12, [
                                    /* "," */44,
                                    /* Int */Block.__(4, [
                                        /* Int_d */0,
                                        /* No_padding */0,
                                        /* No_precision */0,
                                        /* Char_literal */Block.__(12, [
                                            /* " " */32,
                                            /* Int */Block.__(4, [
                                                /* Int_d */0,
                                                /* No_padding */0,
                                                /* No_precision */0,
                                                /* Char_literal */Block.__(12, [
                                                    /* "," */44,
                                                    /* Int */Block.__(4, [
                                                        /* Int_d */0,
                                                        /* No_padding */0,
                                                        /* No_precision */0,
                                                        /* Char_literal */Block.__(12, [
                                                            /* " " */32,
                                                            /* Int */Block.__(4, [
                                                                /* Int_d */0,
                                                                /* No_padding */0,
                                                                /* No_precision */0,
                                                                /* Char_literal */Block.__(12, [
                                                                    /* "," */44,
                                                                    /* Int */Block.__(4, [
                                                                        /* Int_d */0,
                                                                        /* No_padding */0,
                                                                        /* No_precision */0,
                                                                        /* Char_literal */Block.__(12, [
                                                                            /* " " */32,
                                                                            /* Int */Block.__(4, [
                                                                                /* Int_d */0,
                                                                                /* No_padding */0,
                                                                                /* No_precision */0,
                                                                                /* Char_literal */Block.__(12, [
                                                                                    /* "," */44,
                                                                                    /* Int */Block.__(4, [
                                                                                        /* Int_d */0,
                                                                                        /* No_padding */0,
                                                                                        /* No_precision */0,
                                                                                        /* Char_literal */Block.__(12, [
                                                                                            /* " " */32,
                                                                                            /* Int */Block.__(4, [
                                                                                                /* Int_d */0,
                                                                                                /* No_padding */0,
                                                                                                /* No_precision */0,
                                                                                                /* Char_literal */Block.__(12, [
                                                                                                    /* "," */44,
                                                                                                    /* Int */Block.__(4, [
                                                                                                        /* Int_d */0,
                                                                                                        /* No_padding */0,
                                                                                                        /* No_precision */0,
                                                                                                        /* Char_literal */Block.__(12, [
                                                                                                            /* " " */32,
                                                                                                            /* Int */Block.__(4, [
                                                                                                                /* Int_d */0,
                                                                                                                /* No_padding */0,
                                                                                                                /* No_precision */0,
                                                                                                                /* Char_literal */Block.__(12, [
                                                                                                                    /* "," */44,
                                                                                                                    /* Int */Block.__(4, [
                                                                                                                        /* Int_d */0,
                                                                                                                        /* No_padding */0,
                                                                                                                        /* No_precision */0,
                                                                                                                        /* End_of_format */0
                                                                                                                      ])
                                                                                                                  ])
                                                                                                              ])
                                                                                                          ])
                                                                                                      ])
                                                                                                  ])
                                                                                              ])
                                                                                          ])
                                                                                      ])
                                                                                  ])
                                                                              ])
                                                                          ])
                                                                      ])
                                                                  ])
                                                              ])
                                                          ])
                                                      ])
                                                  ])
                                              ])
                                          ])
                                      ])
                                  ])
                              ])
                          ])
                      ])
                  ])
              ]),
            "%d,%d %d,%d %d,%d %d,%d %d,%d %d,%d %d,%d"
          ]), [
        x0,
        y0,
        match$4[0],
        match$4[1],
        match$3[0],
        match$3[1],
        match$2[0],
        match$2[1],
        match$1[0],
        match$1[1],
        match[0],
        match[1],
        x0,
        y0
      ]);
  return Curry._2(Printf.sprintf(/* Format */[
                  /* String_literal */Block.__(11, [
                      "<polygon class='hex_",
                      /* String */Block.__(2, [
                          /* No_padding */0,
                          /* String_literal */Block.__(11, [
                              "' points='",
                              /* String */Block.__(2, [
                                  /* No_padding */0,
                                  /* String_literal */Block.__(11, [
                                      "'></polygon>",
                                      /* End_of_format */0
                                    ])
                                ])
                            ])
                        ])
                    ]),
                  "<polygon class='hex_%s' points='%s'></polygon>"
                ]), r, points$1);
}

function build_text(center, txt) {
  return Curry._3(Printf.sprintf(/* Format */[
                  /* String_literal */Block.__(11, [
                      "<text x='",
                      /* Int */Block.__(4, [
                          /* Int_d */0,
                          /* No_padding */0,
                          /* No_precision */0,
                          /* String_literal */Block.__(11, [
                              "' y='",
                              /* Int */Block.__(4, [
                                  /* Int_d */0,
                                  /* No_padding */0,
                                  /* No_precision */0,
                                  /* String_literal */Block.__(11, [
                                      "'>",
                                      /* String */Block.__(2, [
                                          /* No_padding */0,
                                          /* String_literal */Block.__(11, [
                                              "</text>",
                                              /* End_of_format */0
                                            ])
                                        ])
                                    ])
                                ])
                            ])
                        ])
                    ]),
                  "<text x='%d' y='%d'>%s</text>"
                ]), center[0], center[1], txt);
}

function build_npc(x, y, key) {
  return Curry._3(Printf.sprintf(/* Format */[
                  /* String_literal */Block.__(11, [
                      "<text x='",
                      /* Int */Block.__(4, [
                          /* Int_d */0,
                          /* No_padding */0,
                          /* No_precision */0,
                          /* String_literal */Block.__(11, [
                              "' y='",
                              /* Int */Block.__(4, [
                                  /* Int_d */0,
                                  /* No_padding */0,
                                  /* No_precision */0,
                                  /* String_literal */Block.__(11, [
                                      "'>",
                                      /* String */Block.__(2, [
                                          /* No_padding */0,
                                          /* String_literal */Block.__(11, [
                                              "</text>",
                                              /* End_of_format */0
                                            ])
                                        ])
                                    ])
                                ])
                            ])
                        ])
                    ]),
                  "<text x='%d' y='%d'>%s</text>"
                ]), x, y, key);
}

function build_tiles(left, top, tiles_info) {
  console.log(tiles_info);
  var centers = build_centers(left, top, tiles_info.width, tiles_info.height);
  console.log(Printf.sprintf(/* Format */[
            /* String_literal */Block.__(11, [
                "centers built",
                /* End_of_format */0
              ]),
            "centers built"
          ]));
  var svgs = $$Array.mapi((function (i, c) {
          var info = Caml_array.caml_array_get(tiles_info.tiles, i);
          var type_no = info.tid;
          var txt = build_text(c, info.name);
          var svg = build_svg(type_no, build_hexagon(c));
          return txt + svg;
        }), centers);
  return $$Array.fold_left((function (acc, c) {
                return acc + c;
              }), "", svgs);
}

var tiles_coordinate = /* [] */0;

exports.tiles_coordinate = tiles_coordinate;
exports.build_hexagon = build_hexagon;
exports.build_hexagon_map = build_hexagon_map;
exports.build_centers = build_centers;
exports.build_svg = build_svg;
exports.build_text = build_text;
exports.build_npc = build_npc;
exports.build_tiles = build_tiles;
/* No side effect */
